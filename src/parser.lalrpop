use crate::utils::ast::{Class, Node, Tree};

grammar;

match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  _
}

pub Start : Tree = {
  <tree : Tree> ";" => tree,
  <tree : Tree> "." => tree
}

pub Tree : Tree = {
  "nil" => Tree::Nil,
  "t(" <node : Node> "," <ltree : Tree> "," <rtree : Tree> ")" => {
    Tree::Node {node, ltree : Box::new(ltree), rtree : Box::new(rtree)}
  }
}

pub Node : Node = {
  "n(" <num : Number> "," <class : Class> ")" => {
    Node{id : num, class}
  }
}

pub Number : i32 = {
  r"0|[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap()
}

pub Class : Class = {
  "def" => Class::Def,
  "use" => Class::Use,
  "block" => Class::Block
}
